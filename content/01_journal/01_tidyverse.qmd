---
title: "Tidyverse"
author: "Abou Househ, Ghazi"
---

# Challenge: 
## Analyze the sales by location (state) and year with a bar plot.


```{r}
# 1.0 Load needed libraries ----
library(tidyverse)
library(readxl)
library(lubridate)
library("writexl")
# 2.0 Importing raw data from excel files ----
bikes_tbl      <- read_excel(path = "01_tidyverse_files/ds_data/ds_data/01_bike_sales/01_raw_data/bikes.xlsx")
orderlines_tbl <- read_excel("01_tidyverse_files/ds_data/ds_data/01_bike_sales/01_raw_data/orderlines.xlsx")
bikeshops_tbl  <- read_excel("01_tidyverse_files/ds_data/ds_data/01_bike_sales/01_raw_data/bikeshops.xlsx")

# 3.0 Examining the raw data ----
#orderlines_tbl
#glimpse(orderlines_tbl)

# 4.0 Joining the raw data ----
bike_orderlines_joined_tbl <- orderlines_tbl %>% 
  left_join(bikes_tbl, by =c("product.id"="bike.id")) %>%
  left_join(bikeshops_tbl, by =c("customer.id"="bikeshop.id"))


# 5.0 Wrangling the raw data ----

bike_state_wrangled_tbl <- bike_orderlines_joined_tbl%>%
  separate(col=location,
           into= c("city","state"),
           sep= ",")%>%
mutate(total.price= price * quantity)%>%
select(-...1, -gender)%>%
 select(order.id,city,state,order.date, total.price, contains("model"), contains("category"),
         price, quantity,
         everything()) %>%
  rename(bikeshop = name) %>%
  set_names(names(.) %>% str_replace_all("\\.", "_"))

  

# 6.0 Business Insights ----
# 6.1 Sales by Location ----

# Step 1 - Manipulate data

state_sales <- bike_state_wrangled_tbl%>%
  select(state,total_price)%>%
  group_by(state)%>%
  summarize(sales=sum(total_price))%>%
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                     decimal.mark = ",", 
                                     prefix = "", 
                                     suffix = " €"))
# Step 2 - Visualize data
state_sales %>%
  
  # Setup canvas with the columns year (x-axis) and sales (y-axis)
  ggplot(aes(x = state, y = sales)) +
  
  # Geometries
  geom_col(fill = "#00FF00") + # Use geom_col for a bar plot
  geom_label(aes(label = sales_text)) + # Adding labels to the bars
  geom_smooth(method = "lm", se = FALSE) + # Adding a trendline
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  + 
  # Formatting
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title    = "Revenue by States",
    x = "States", # Override defaults for x and y
    y = "Revenues"
  )
```


### Which state has the highest revenue?

It can be clearly seen from the generated plot that **"North Rhine-Westphalia"** has the highest revenue.

# Challenge

## Analyze the sales by location and year. 


```{r}
# 6.2 Sales by Location and Year----

# Step 1 - Manipulate
sales_by_location_year <- bike_state_wrangled_tbl %>%
  
  # Select columns and add a year
  select(order_date, total_price,state) %>%
  mutate(year = year(order_date)) %>%
  
  # Group by and summarize year and state
  group_by(year,state) %>%
  summarise(sales = sum(total_price)) %>%
  ungroup() %>%
  
  # Format $ Text
  mutate(sales_text = scales::dollar(sales, big.mark = ".", 
                                     decimal.mark = ",", 
                                     prefix = "", 
                                     suffix = " €"))

# Step 2 - Visualize
sales_by_location_year %>%
  
  # Set up x, y, fill
  ggplot(aes(x = year, y = sales, fill = state)) +
  
  # Geometries
  geom_col() + # Run up to here to get a stacked bar plot
  
  # Facet
  facet_wrap(~ state) +
  
  # Formatting
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title = "Revenue by Year and State",
    fill = "Main category" # Changes the legend name
  )
```
