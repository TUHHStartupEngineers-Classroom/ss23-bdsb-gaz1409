---
title: "Data Visualization"
author: "Abou Househ, Ghazi"
---

# Challenge: 
## Map the time course of the cumulative Covid-19 cases.

```{r}
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
library(scales)
library(tidyr)

covid_data_tbl <- read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")
show_col_types = FALSE

covid_data_tbl <- covid_data_tbl[order(as.Date(covid_data_tbl$date, format="%d/%m/%Y")),]


covid_data_tbl <- covid_data_tbl %>%
  mutate_if(is.numeric,~replace_na(.,0))


covid_data_tbl2 <- covid_data_tbl %>%
  filter(location %in% c('Spain', 'United Kingdom', 'France', 'Germany','United States')) %>%
  select(date, location, new_cases) %>%
  group_by(location) %>%
  mutate(cumulativeCases = cumsum(new_cases))  %>%
  select(date, location, cumulativeCases) %>%
  rename(countries = location)


# Custom function to format labels in million abbreviation
custom_y_labels <- function(y) {
  y_million <- y / 1e+06
  paste0(y_million, " Mio")
}
 

# Plot 
ticks = c("Dec","Jan", 'Feb','March', 'April', 'May', 'June','July',
          'Aug','Sept','Oct','Nov','Dec')

y_ticks = seq(0,max(covid_data_tbl2$cumulativeCases, na.rm = TRUE, finite = TRUE),50000000)
covid_data_tbl2 %>%
  ggplot(aes(x = as.POSIXct(date, format = "%B '%y"), y = cumulativeCases)) +
  geom_line(aes(color = countries), size = 1) +
  labs(x = 'Year 2020', y='Cumulative Cases', fill = 'Countries') +
  scale_x_datetime(date_breaks = 'month', labels = label_date_short()) +
  scale_y_continuous(breaks=c(y_ticks))
```


# Challenge: 
## Visualize the distribution of the mortality rate (deaths / population).

```{r}
library(maps)
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
theme_set(
  theme_dark()
)
covid_data_tbl <- read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")

world <- map_data('world') %>%
  rename(countries = region) %>%
  dplyr::select(countries,long,lat,group) 
  
covid_data_tbl <- covid_data_tbl %>%
  mutate(across(location, str_replace_all, "_", " ")) %>%
  mutate(location = case_when(
    
    location == "United Kingdom" ~ "UK",
    location == "United States" ~ "USA",
    location == "Democratic Republic of Congo" ~ "Democratic Republic of the Congo",
    TRUE ~ location
    
  ))
population <- covid_data_tbl %>%
  group_by(location) %>%
  dplyr::select(location, population) %>%
  unique() %>%
  rename(countries = location)

covid_data_tbl <- covid_data_tbl %>%
  mutate_if(is.numeric,~replace_na(.,0))

mortality_rate_tbl <- covid_data_tbl %>%
  group_by(location) %>%
  summarise( 
    total_deaths = sum(new_deaths)
    ) %>%
  rename(countries = location)

useful_map <- left_join(population,mortality_rate_tbl, by = "countries")
final_tbl <- left_join(world, useful_map, by = 'countries') %>%
  mutate(mort_rate = total_deaths / population)
#plotting the values
ggplot(final_tbl, aes(long, lat, group = group))+
  geom_polygon(aes(fill = mort_rate), color = "white")+
  scale_fill_gradient(low = 'pink', high = 'red', na.value = 'white')
```


# Challenge: 
## Visualize the distribution of the mortality rate (deaths / population).

```{r}
library(maps)
library(tidyverse)
library(dplyr)
library(lubridate)
library(ggplot2)
theme_set(
  theme_dark()
)
covid_data_tbl <- read_csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")

world <- map_data('world') %>%
  rename(countries = region) %>%
  dplyr::select(countries,long,lat,group) 
  
covid_data_tbl <- covid_data_tbl %>%
  mutate(across(countriesAndTerritories, str_replace_all, "_", " ")) %>%
  mutate(countriesAndTerritories = case_when(
    
    countriesAndTerritories == "United Kingdom" ~ "UK",
    countriesAndTerritories == "United States of America" ~ "USA",
    countriesAndTerritories == "Czechia" ~ "Czech Republic",
    TRUE ~ countriesAndTerritories
    
  ))
population <- covid_data_tbl %>%
  group_by(countriesAndTerritories) %>%
  dplyr::select(countriesAndTerritories, popData2019) %>%
  unique() %>%
  rename(countries = countriesAndTerritories)
  
mortality_rate_tbl <- covid_data_tbl %>%
  group_by(countriesAndTerritories) %>%
  summarise( 
    total_deaths = sum(deaths)
    ) %>%
  rename(countries = countriesAndTerritories)
useful_map <- left_join(population,mortality_rate_tbl, by = "countries")
final_tbl <- left_join(world, useful_map, by = 'countries') %>%
  mutate(mort_rate = total_deaths / popData2019)
#plotting the values
ggplot(final_tbl, aes(long, lat, group = group))+
  geom_polygon(aes(fill = mort_rate), color = "white")+
  scale_fill_gradient(low = 'orange', high = 'red', na.value = 'white')
```
